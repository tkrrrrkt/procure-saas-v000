generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:!Ktkrr0714@localhost:5432/procure_erp?schema=v000"
  //url = env("DATABASE_URL")
}

model EmpAccount {
  emp_account_cd             String               @db.VarChar(20)
  emp_name                   String               @db.VarChar(15)
  emp_kana_name              String               @db.VarChar(15)
  email                      String?              @db.VarChar(50)
  // ↓ 認証情報をlogin_accountテーブルに移行するため、フィールドを削除
  // password_hash              String               @db.VarChar(255)
  role                       String               @db.VarChar(20)
  valid_flg                  String               @db.VarChar(1)
  // ↓ 認証情報をlogin_accountテーブルに移行するため、フィールドを削除
  // last_login                 DateTime?
  created_at                 DateTime             @default(now())
  created_by_id              String?              @db.Uuid
  updated_at                 DateTime             @updatedAt
  updated_by_id              String?              @db.Uuid
  emp_account_id             String               @id @default(uuid()) @db.Uuid
  tenant_id                  String               @db.Uuid
  createdDepartmentVersions  DepartmentVersion[]  @relation("DepartmentVersionCreatedBy")
  createdDepartments         Department[]         @relation("DepartmentCreatedBy")
  createdBy                  EmpAccount?          @relation("CreatedByAccounts", fields: [created_by_id], references: [emp_account_id])
  createdAccounts            EmpAccount[]         @relation("CreatedByAccounts")
  updatedBy                  EmpAccount?          @relation("UpdatedByAccounts", fields: [updated_by_id], references: [emp_account_id])
  updatedAccounts            EmpAccount[]         @relation("UpdatedByAccounts")
  createdEmployeeDepartments EmployeeDepartment[] @relation("EmployeeDepartmentCreatedBy")
  departmentAssignments      EmployeeDepartment[]
  createdOrgHistories        OrgHistory[]         @relation("OrgHistoryCreatedBy")
  updatedOrgHistories        OrgHistory[]         @relation("OrgHistoryUpdatedBy")
  // ↓ LoginAccountとの関連を追加
  loginAccount               LoginAccount?        @relation("EmpAccountLogin")

  @@unique([tenant_id, emp_account_cd], map: "emp_account_tenant_cd_unique")
  @@unique([tenant_id, email], map: "emp_account_tenant_email_unique")
  @@index([tenant_id])
  @@map("emp_account")
}

model OrgHistory {
  org_history_id     String              @id @default(uuid()) @db.Uuid
  tenant_id          String              @db.Uuid
  org_history_cd     String?             @db.VarChar(20)
  valid_from         DateTime
  valid_to           DateTime?
  org_change_name    String              @db.VarChar(20)
  created_at         DateTime            @default(now())
  created_by_id      String?             @db.Uuid
  updated_at         DateTime            @updatedAt
  updated_by_id      String?             @db.Uuid
  departmentVersions DepartmentVersion[]
  createdBy          EmpAccount?         @relation("OrgHistoryCreatedBy", fields: [created_by_id], references: [emp_account_id])
  updatedBy          EmpAccount?         @relation("OrgHistoryUpdatedBy", fields: [updated_by_id], references: [emp_account_id])

  @@unique([tenant_id, org_history_cd], map: "org_history_tenant_cd_unique")
  @@index([tenant_id])
  @@index([tenant_id, valid_from])
  @@index([tenant_id, valid_to])
  @@map("org_history")
}

model Department {
  department_id           String               @id @default(uuid()) @db.Uuid
  tenant_id               String               @db.Uuid
  department_cd           String               @db.VarChar(10)
  created_at              DateTime             @default(now())
  created_by_id           String?              @db.Uuid
  versions                DepartmentVersion[]
  childDepartmentVersions DepartmentVersion[]  @relation("ParentDepartmentVersion")
  createdBy               EmpAccount?          @relation("DepartmentCreatedBy", fields: [created_by_id], references: [emp_account_id])
  employeeAssignments     EmployeeDepartment[]

  @@unique([tenant_id, department_cd], map: "department_tenant_cd_unique")
  @@index([tenant_id])
  @@map("departments")
}

model DepartmentVersion {
  department_version_id String      @id @default(uuid()) @db.Uuid
  department_id         String      @db.Uuid
  tenant_id             String      @db.Uuid
  org_history_id        String?     @db.Uuid
  valid_from            DateTime
  valid_to              DateTime?
  department_name       String      @db.VarChar(30)
  department_short_name String      @db.VarChar(15)
  department_kana_name  String      @db.VarChar(30)
  department_level      Int
  department_symbol     String      @db.VarChar(3)
  parent_department_id  String?     @db.Uuid
  budget_target_flg     String      @db.VarChar(1)
  prefectures           String?     @db.VarChar(20)
  municipality          String?     @db.VarChar(20)
  place_name            String?     @db.VarChar(20)
  bldg_name             String?     @db.VarChar(20)
  phone                 String?     @db.VarChar(20)
  fax                   String?     @db.VarChar(20)
  version_created_at    DateTime    @default(now())
  version_created_by_id String?     @db.Uuid
  department            Department  @relation(fields: [department_id], references: [department_id])
  orgHistory            OrgHistory? @relation(fields: [org_history_id], references: [org_history_id])
  parentDepartment      Department? @relation("ParentDepartmentVersion", fields: [parent_department_id], references: [department_id])
  versionCreatedBy      EmpAccount? @relation("DepartmentVersionCreatedBy", fields: [version_created_by_id], references: [emp_account_id])

  @@index([department_id])
  @@index([tenant_id])
  @@index([org_history_id])
  @@index([parent_department_id])
  @@index([department_id, valid_from])
  @@index([department_id, valid_to])
  @@map("department_versions")
}

model EmployeeDepartment {
  employee_department_id   String      @id @default(uuid()) @db.Uuid
  emp_account_id           String      @db.Uuid
  department_id            String      @db.Uuid
  tenant_id                String      @db.Uuid
  valid_from               DateTime
  valid_to                 DateTime?
  valid_flg                String      @db.VarChar(1)
  assignment_created_at    DateTime    @default(now())
  assignment_created_by_id String?     @db.Uuid
  assignmentCreatedBy      EmpAccount? @relation("EmployeeDepartmentCreatedBy", fields: [assignment_created_by_id], references: [emp_account_id])
  department               Department  @relation(fields: [department_id], references: [department_id])
  employee                 EmpAccount  @relation(fields: [emp_account_id], references: [emp_account_id])

  @@index([emp_account_id])
  @@index([department_id])
  @@index([tenant_id])
  @@index([emp_account_id, valid_from])
  @@index([emp_account_id, valid_to])
  @@index([department_id, valid_from])
  @@index([department_id, valid_to])
  @@map("employee_departments")
}

model Organization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(50)
  address     String   @db.VarChar(255)
  phone       String   @db.VarChar(20)
  email       String   @db.VarChar(100)
  website     String?  @db.VarChar(255)
  description String?  @db.Text
  status      String   @db.VarChar(20)
  timezone    String   @db.VarChar(50)
  language    String   @db.VarChar(10)
  currency    String   @db.VarChar(10)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("organizations")
}

// 監査ログテーブル
model AuditLog {
  id                String    @id @default(uuid()) @db.Uuid
  tenant_id         String?   @db.Uuid
  user_id           String?   @db.VarChar(100)
  user_role         String    @db.VarChar(50)
  action            String    @db.VarChar(100)
  resource          String    @db.VarChar(100)
  resource_id       String?   @db.VarChar(100)
  ip_address        String    @db.VarChar(50)
  user_agent        String?   @db.VarChar(255)
  request_params    Json?
  request_query     Json?
  request_body      Json?
  response_status   Int
  severity          String    @db.VarChar(20)
  log_type          String    @db.VarChar(50)
  execution_time    Int
  timestamp         DateTime  @default(now())
  is_privileged     Boolean   @default(false)
  privilege_details String?   @db.VarChar(255)

  @@index([tenant_id])
  @@index([user_id])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([severity])
  @@index([log_type])
  @@index([is_privileged])
  @@map("audit_logs")
}

// アプリ内通知モデル
model Notification {
  id           String    @id @default(uuid())
  user_id      String    // 通知の対象ユーザーID
  title        String    // 通知のタイトル
  message      String    // 通知の詳細メッセージ
  severity     String    // 通知の重要度（low/medium/high）
  metadata     Json?     // 追加メタデータ（JSON形式）
  read         Boolean   @default(false) // 既読状態
  created_at   DateTime  @default(now()) // 作成日時
  read_at      DateTime? // 既読日時

  @@index([user_id])
  @@index([read])
  @@index([created_at])
}

// テスト用ユーザーモデル
model TestUser {
  id              String      @id @default(uuid()) @db.Uuid
  username        String
  email           String      @unique
  role            String      // admin, purchase_admin, security_admin など
  is_active       Boolean     @default(true)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  testOrders      TestOrder[] // リレーション
  
  // MFA関連フィールドを追加
  mfa_enabled     Boolean     @default(false)
  mfa_secret      String?     @db.VarChar(255)
  mfa_backup_codes Json?      // バックアップコードのリスト（JSON配列）
  mfa_last_used   DateTime?   // 最後にMFAが使用された日時

  @@index([role])
  @@index([is_active])
  @@map("test_users") // テーブル名
}

// テスト用注文モデル
model TestOrder {
  id            String    @id @default(uuid()) @db.Uuid
  order_number  String    @unique
  user_id       String    @db.Uuid
  status        String    // pending, approved, cancelled, completed など
  total_amount  Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          TestUser  @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([status])
  @@index([created_at])
  @@map("test_orders") // テーブル名
}

// 異常ログモデル
model AnomalyLogRecord {
  id           String    @id @default(uuid()) @db.Uuid
  type         String    // 異常の種類（high_purchase, auth_failure, unusual_access など）
  severity     String    // 重要度（low/medium/high）
  user_id      String?   @db.Uuid // 関連ユーザーID（ない場合もある）
  details      Json      // 詳細情報（種類によって異なる）
  detected_at  DateTime  @default(now()) // 検出日時
  is_resolved  Boolean   @default(false) // 解決済みフラグ
  resolved_at  DateTime? // 解決日時
  resolved_by  String?   @db.Uuid // 解決者のユーザーID
  notes        String?   // 解決時のメモ

  @@index([type])
  @@index([severity])
  @@index([user_id])
  @@index([detected_at])
  @@index([is_resolved])
  @@map("anomaly_logs") // テーブル名
}

// 新しいログインアカウントモデル
model LoginAccount {
  id                String      @id @default(uuid()) @db.Uuid
  tenant_id         String      @db.Uuid
  username          String      @db.VarChar(50)      // ログインID
  password_hash     String      @db.VarChar(255)     // パスワードハッシュ
  emp_account_id    String?     @unique @db.Uuid     // 従業員アカウントとの関連（1対1）
  empAccount        EmpAccount? @relation("EmpAccountLogin", fields: [emp_account_id], references: [emp_account_id])
  role              String      @db.VarChar(20)      // 権限ロール
  status            String      @db.VarChar(10)      // アカウント状態（active, locked, disabled など）
  last_login        DateTime?                        // 最終ログイン日時
  login_failure_count Int       @default(0)          // 連続ログイン失敗回数
  locked_until      DateTime?                        // アカウントロック期限
  password_changed_at DateTime @default(now())       // パスワード最終変更日
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  
  // MFA関連フィールド
  mfa_enabled       Boolean     @default(false)      // MFA有効フラグ
  mfa_secret        String?     @db.VarChar(255)     // MFAシークレット
  mfa_backup_codes  Json?                            // バックアップコードのリスト（JSON配列）
  mfa_last_used     DateTime?                        // 最後にMFAが使用された日時

  @@unique([tenant_id, username])
  @@index([tenant_id])
  @@index([username])
  @@index([emp_account_id])
  @@index([status])
  @@map("login_accounts")
}